import DonationTable from '../../../03_organisms/Donation/Donationtable/DonationTable';
import DonationForm from '../../../03_organisms/Donation/DonationForm/DonationForm';
import { useEffect, useState } from 'react';
import { pb } from '@/api/pocketbase';
import ConfirmModal from '@/components/02_molecules/Modal/ConfirmModal/ConfirmModal';
import useLoginFormStore from '@/store/useLoginFormStore';
import useNoticeList from '@/store/useNoticeList';
import useCountStore from '@/store/useCountStore';

interface Donation {
  id?: string;
  name: string;
  category: string;
  description: string;
}

function DonationSubmission() {
  const { plusCount } = useCountStore();

  const [showModal, setShowModal] = useState(false);
  const [modalTitle, setModalTitle] = useState('');
  const [modalMessage, setModalMessage] = useState('');
  const { userInfo } = useLoginFormStore();

  const [donations, setDonations] = useState<Donation[]>([]);

  const handleAddDonation = (donation: Donation) => {
    const lastId = parseInt(localStorage.getItem('lastDonationId') || '0', 10);
    const newId = lastId + 1;
    const newDonation = { ...donation, id: newId.toString() };

    setDonations((prevDonations) => {
      const updatedDonations = [...prevDonations, newDonation];
      localStorage.setItem('donations', JSON.stringify(updatedDonations));
      localStorage.setItem('lastDonationId', newId.toString());
      return updatedDonations;
    });
  };

  const storedDonations = localStorage.getItem('donations');

  if (storedDonations) {
    const donations = JSON.parse(storedDonations);

    // Í∞Å ÌõÑÏõê Îç∞Ïù¥ÌÑ∞Ïùò ID Í∞í
    donations.forEach((donation) => {
      console.log(donation.id);
    });
  } else {
    console.log('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•Îêú ÌõÑÏõê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
  }

  const handleDeleteDonation = (id: string) => {
    setDonations((prevDonations) => {
      const updatedDonations = prevDonations.filter(
        (donation) => donation.id !== id
      );
      localStorage.setItem('donations', JSON.stringify(updatedDonations));
      return updatedDonations;
    });
  };

  const handleSubmit = async () => {
    if (
      donations.length === 0 ||
      donations.some(
        (donation) =>
          !donation.name || !donation.category || !donation.description
      )
    ) {
      setModalTitle('Ïã§Ìå®');
      setModalMessage('ÌïÑÏöîÌïú Ï†ïÎ≥¥Î•º Î™®Îëê ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.');
      setShowModal(true);
      return;
    }

    try {
      for (const donation of donations) {
        const dataToSend = {
          name: donation.name,
          category: donation.category,
          description: donation.description,
          userId: userInfo.id,
        };

        const response = await pb.collection('donation').create(dataToSend);

        const data = {
          id: response.id,
          field: 'notification',
          title: donation.description,
          description: donation.description,
          isComplete: true,
          photo: '',
          userId: userInfo.id,
          type: 'donation',
        };

        await pb.collection('notification').create(data);

        // addNotice(data);
        plusCount();

        const donationList = await pb.collection('donation').create(dataToSend);
        console.log('Saved donation ID:', donationList.id); // Ìè¨ÏºìÎ≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Ïùò Id
      }
      localStorage.removeItem('donations');
      localStorage.setItem('lastDonationId', '0'); // localStorage ID Ï¥àÍ∏∞Ìôî

      setDonations([]);
      setModalTitle('Ïã†Ï≤≠ÏôÑÎ£å');
      setModalMessage('ÌõÑÏõê Ïã†Ï≤≠Ïù¥ ÏôÑÎ£å ÎêòÏóàÏäµÎãàÎã§. Í∞êÏÇ¨Ìï©ÎãàÎã§.');
      setShowModal(true);
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®:', error);
      setModalTitle('Ïò§Î•òü§Ø');
      setModalMessage('Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      setShowModal(true);
    }
  };

  useEffect(() => {
    const storedDonations = localStorage.getItem('donations');
    if (storedDonations) {
      setDonations(JSON.parse(storedDonations));
    }
  }, []);

  return (
    <div className="py-20">
      <div className="flex flex-col gap-8 items-center justify-center w-[64rem] m-auto py-20 border border-gray-200 rounded-[50px]">
        <h2 className="text-4xl">ÌõÑÏõê Ïã†Ï≤≠</h2>

        <div className="max-w-[595px] flex flex-col gap-10 items-center">
          <DonationForm onAddDonation={handleAddDonation} />
          {/* formÏùò Îç∞Ïù¥ÌÑ∞Îäî localStorage Ï†ÄÏû• */}

          <div className="w-full h-[1px] bg-gray-200"></div>

          <DonationTable
            donations={donations}
            onDeleteDonation={handleDeleteDonation}
          />

          <p>‚ö†Ô∏èÏã†Ï≤≠ÏÑú Ï†úÏ∂ú ÌõÑ Ï∑®ÏÜå Î∂àÍ∞Ä</p>

          <button
            type="button"
            onClick={handleSubmit}
            className="font-bold text-blue-primary border-2 border-blue-primary rounded-[3px] py-2 w-full m-auto hover:bg-blue-primary hover:text-white"
          >
            Ï†úÏ∂úÌïòÍ∏∞
          </button>
          {showModal && (
            <ConfirmModal
              title={modalTitle}
              onClose={() => setShowModal(false)}
            >
              <p>{modalMessage}</p>
            </ConfirmModal>
          )}
        </div>
      </div>
    </div>
  );
}

export default DonationSubmission;
